stages:
  - test
  - deploy

# Test backend
test-backend:
  stage: test
  image: python:3.9-slim
  script:
    - cd backend && pip install -r requirements.txt && python app.py init
  only:
    - main
    - merge_requests

# Test frontend
test-frontend:
  stage: test
  image: node:16-alpine
  script:
    - cd frontend && npm ci --prefer-offline && CI=false npm run build
  only:
    - main
    - merge_requests

# Deploy to VM (build Docker images on VM)
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > /tmp/ssh_key && chmod 600 /tmp/ssh_key && ssh-add /tmp/ssh_key && rm /tmp/ssh_key
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh && ssh-keyscan -H $VM_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << 'EOF'
        cd /var/www/cluster-usage-dashboard
        git fetch origin main && git reset --hard origin/main
        docker-compose -f docker-compose.prod.yml down || true
        docker-compose -f docker-compose.prod.yml up --build -d
        sleep 10 && docker-compose -f docker-compose.prod.yml ps
      EOF
  only:
    - main
  needs: ["test-backend", "test-frontend"]