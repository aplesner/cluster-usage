stages:
  - test
  - deploy

# Test backend
test-backend:
  stage: test
  image: python:3.9-slim
  before_script:
    - cd backend
    - pip install -r requirements.txt
  script:
    - python app.py init  # Test database initialization
    - echo "Backend tests completed successfully"
  only:
    - main
    - merge_requests

# Test frontend
test-frontend:
  stage: test
  image: node:16-alpine
  before_script:
    - cd frontend
    - npm ci --prefer-offline --no-audit
  script:
    - npm run build  # Test if build succeeds
    - echo "Frontend build completed successfully"
  only:
    - main
    - merge_requests

# Deploy directly to VM (build on VM)
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $VM_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh $VM_USER@$VM_HOST "
        # Navigate to project directory
        cd /var/www/cluster-usage-dashboard || exit 1
        
        # Pull latest code
        git fetch origin main
        git reset --hard origin/main
        
        # Stop current containers
        docker-compose -f docker-compose.prod.yml down || true
        
        # Build and start with new code
        docker-compose -f docker-compose.prod.yml up --build -d
        
        # Clean up old images
        docker image prune -f
        
        # Show status
        docker-compose -f docker-compose.prod.yml ps
      "
  only:
    - main
  needs: ["test-backend", "test-frontend"]